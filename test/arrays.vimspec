Describe arrays

    Before all
        let s:V = vital#of('vital')
        let s:Un = s:V.import('Underscore')
        let g:_ = s:Un.import()
        call themis#func_alias({'_': g:_})
    End

    function! g:_(...) abort
        return call(s:Un.underscore, a:000)
    endfunction

    Context first
        It can pull out the first element of an array
            Assert Equals(g:_.first([1,2,3]), 1)
        End
        It can perform OO-style "first()"
            Assert Equals(g:_([1,2,3]).first(), 1)
        End
        It can pass an index to first
            Assert Equals(g:_.first([1,2,3], 0), [])
        End
        It can pass an index to first
            Assert Equals(g:_.first([1,2,3], 5), [1,2,3])
        End
        It works well with _.map
            let r = g:_.map([[1, 2, 3], [1, 2, 3]], g:_.first)
            Assert Equals(r, [1, 1])
        End
        It handle negative index
            Assert Equals(g:_.first([1,2,3], -1), [])
        End
    End

    Context head
        It alias for first
            Assert Equals(g:_.first, g:_.head)
        End
    End

    Context take
        It alias for first
            Assert Equals(g:_.first, g:_.take)
        End
    End

    Context rest
        let numbers = [1, 2, 3, 4]
        It working rest()
            Assert Equals(g:_.rest(numbers), [2,3,4])
        End
        It working rest(0)
            Assert Equals(g:_.rest(numbers, 0), [1,2,3,4])
        End
        It can take an index
            Assert Equals(g:_.rest(numbers, 2), [3,4])
        End
        It works on arguments object
            Assert Equals(g:_(numbers).rest(), [2,3,4])
        End
        It works well with _.map
            let r = g:_.map([[1,2,3],[1,2,3]], g:_.rest)
            Assert Equals(g:_.flatten(r), [2,3,2,3])
        End
    End

    Context tail
        It alias for rest
            Assert Equals(g:_.rest, g:_.tail)
        End
    End

    Context drop
        It alias for rest
            Assert Equals(g:_.rest, g:_.drop)
        End
    End

    Context initial
        It working initial()
            Assert Equals(g:_.initial([1,2,3,4,5]), [1,2,3,4])
        End
        It initial can take an index
            Assert Equals(g:_.initial([1,2,3,4], 2), [1,2])
        End
        It initial can take a large index
            Assert Equals(g:_.initial([1,2,3,4], 6), [])
        End
        It initial works with _.map
            let r = g:_.map([[1, 2, 3], [1, 2, 3]], g:_.initial)
            Assert Equals(g:_.flatten(r), [1,2,1,2])
        End
    End

    Context last
        It can pull out the last element of an array
            Assert Equals(g:_.last([1,2,3]), 3)
        End
        It can pass an index to last
            Assert Equals(g:_.last([1,2,3], 0), [])
        End
        It can pass an index to last
            Assert Equals(g:_.last([1,2,3], 2), [2,3])
        End
        It can pass a large index to last
            Assert Equals(g:_.last([1,2,3], 5), [1,2,3])
        End
        It works on an arguments object
            Assert Equals(g:_([1,2,3,4]).last(), 4)
        End
        It works well with _.map
            let r = g:_.map([[1, 2, 3], [1, 2, 3]], g:_.last)
            Assert Equals(r, [3, 3])
        End
        It handle negative index
            Assert Equals(g:_.last([1,2,3], -1), [])
        End
    End

    Context compact
        It can trim out all falsy values
            let r = g:_.compact([0,1,2,3,'', 'vim'])
            Assert Equals(r, [1,2,3,'vim'])
        End
    End

    Context flatten
        It Flattens empty arrays
            Assert Equals(g:_.flatten([[], [[]], []]), [])
        End
        let list = [1, [2], [3, [[[4]]]]]
        It can flatten nested arrays
            Assert Equals(g:_.flatten(list), [1,2,3,4])
        End
        It works on an arguments object
            Assert Equals(g:_(list).flatten(), [1,2,3,4])
        End
        It Flatten can handle massive collections
            let r = g:_([range(10), range(10), 5, 1, 3]).flatten()
            Assert Equals(len(r), 23)
            let r = g:_([range(10000), 5, 1, 3]).flatten()
            Assert Equals(len(r), 10003)
        End
    End

    Context uniq
        It can find the unique values of an unsorted array
            let list = [1, 2, 1, 3, 1, 4]
            Assert Equals(g:_.uniq(list), [1,2,3,4])
        End
    End

    Context unique
        It alias for uniq
            Assert Equals(g:_.unique, g:_.uniq)
        End
    End

    Context uniq_by
        It can find the unique values of an array using a custom iterator
            let list = [{'name': 'moe'}, {'name': 'curly'}, {'name': 'larry'}, {'name': 'curly'}]
            let r = g:_.chain(list).uniq_by('v:val.name').map('v:val.name').value()
            Assert Equals(r, ['moe', 'curly', 'larry'])
        End
    End

    Context unique_by
        It alias for uniq_by
            Assert Equals(g:_.unique_by, g:_.uniq_by)
        End
    End

    Context zip
        It zipped pairs
            let names = ['moe', 'larry', 'curly']
            let ages = [30, 40, 50]
            let leaders = [1, 0, 0]
            let r = g:_.zip(names, ages, leaders)
            Assert Equals(r, [
            \   ['moe', 30, 1],
            \   ['larry', 40, 0],
            \   ['curly', 50, 0]
            \ ])
        End
        It unzipped empty
            Assert Equals(g:_.zip([]), [])
        End
        It _.zip() returns []
            Assert Equals(g:_.zip(), [])
        End
    End

    Context Skip
        It without
            Skip 'should I implement it?'
        End
        It sortedIndex
            Skip 'should I implement it?'
        End
        It intersection
            Skip 'should I implement it?'
        End
        It union
            Skip 'should I implement it?'
        End
        It difference
            Skip 'should I implement it?'
        End
        It zip_fill
            Skip 'should I implement it?'
        End
        It unzip
            Skip 'should I implement it?'
        End
        It object
            Skip 'should I implement it?'
        End
        It indexOf
            Skip 'should I implement it?'
        End
        It lastIndexOf
            Skip 'should I implement it?'
        End
        It findIndex
            Skip 'should I implement it?'
        End
        It range
            Skip 'should I implement it?'
        End
    End

End
